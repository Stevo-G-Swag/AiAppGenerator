from app.utils.openai_client import get_completion
from app.utils.code_validator import validate_syntax
import json

class CodeGenerator:
    async def generate(self, project_spec: dict) -> dict:
        generated_files = {}
        
        for component in project_spec["components"]:
            prompt = f"""
            Generate production-ready code for the following component specification:
            {json.dumps(component, indent=2)}
            
            Project Context:
            - Features: {json.dumps(project_spec.get('features', []), indent=2)}
            - API Endpoints: {json.dumps(project_spec.get('api_endpoints', []), indent=2)}
            
            Follow these requirements:
            1. Code Structure:
               - Implement all specified classes and functions
               - Include proper type hints
               - Follow clean code principles
            
            2. Error Handling:
               - Implement comprehensive error handling
               - Use custom exceptions where appropriate
               - Include logging for errors and important events
            
            3. Documentation:
               - Add detailed docstrings (Google style)
               - Include usage examples in docstrings
               - Add inline comments for complex logic
            
            4. Best Practices:
               - Follow PEP 8 style guide
               - Implement proper dependency injection
               - Use async/await where appropriate
               - Include proper validation
            
            Generate valid Python code that can be directly used in production.
            """
            
            code = await get_completion(prompt)
            
            # Validate generated code
            if validate_syntax(code):
                # Add file header with metadata
                file_header = f'''"""
{component['name']}

Purpose: {component['purpose']}
Generated by: AI Application Generator
Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""

'''
                generated_files[component['path']] = file_header + code
            else:
                raise Exception(f"Invalid syntax in generated code for {component['path']}")
        
        return generated_files
